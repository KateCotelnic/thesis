version: '2'

services:
  ms:
    image: 'ms'
    ports:
      - 8090:8090
    build:
      context: ../ms
    container_name: ms
    environment:
      - SERVER_PORT=8090

  as:
    image: 'as'
    ports:
      - 8092:8092
    build:
      context: ../as
    container_name: as
    depends_on:
      - rabbitmq
    environment:
      - SERVER_PORT=8092
      - SPRING_RABBITMQ_HOST=rabbitmq

  ns:
    image: 'ns'
    ports:
      - 8093:8093
    build:
      context: ../ns
    container_name: ns
    depends_on:
      - rabbitmq
    environment:
      - SERVER_PORT=8093
#      - SPRING_RABBITMQ_HOST=rabbitmq
#      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_ADDRESSES=rabbitmq:5672

  rs:
    image: 'rs'
    ports:
      - 8091:8091
    build:
      context: ../rs
    container_name: rs
    depends_on:
      - db
    environment:
      - SERVER_PORT=8091
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ehealth
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_FLYWAY_SCHEMAS=public
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration
      - JPA_DEFAULT_SCHEMA_NAME=public
      - FLYWAY_MIGRATION_URL=jdbc:postgresql://db:5432/ehealth
      - FLYWAY_USERNAME=postgres
      - FLYWAY_PASSWORD=postgres

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  db:
    image: 'postgres:13.4-alpine'
    ports:
      - 5442:5432
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ehealth

#
#  node:
#    image: 'node:latest'
#    ports:
#      - 8080:8080
#    build:
#      context: ../../../test/
#    container_name: node
#    environment:
#      - SPRING_APPLICATION_NAME=node
#      - SERVER_PORT=8080

  #  node:
  #    restart: always
  #    container_name: node
  #    build:
  #      context: ../mongo/
  #    ports:
  #      - 8080:8080
  #    volumes:
  #      - ./:/code